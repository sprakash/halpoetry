{
version: 3,
sources: [
"webpack://WaveSurfer/webpack/universalModuleDefinition",
"webpack://WaveSurfer/webpack/bootstrap",
"webpack://WaveSurfer/./src/util/index.js",
"webpack://WaveSurfer/./src/util/observer.js",
"webpack://WaveSurfer/./src/util/request-animation-frame.js",
"webpack://WaveSurfer/./src/webaudio.js",
"webpack://WaveSurfer/./src/wavesurfer.js",
"webpack://WaveSurfer/./src/util/ajax.js",
"webpack://WaveSurfer/./src/util/get-id.js",
"webpack://WaveSurfer/./src/util/max.js",
"webpack://WaveSurfer/./src/util/min.js",
"webpack://WaveSurfer/./src/util/extend.js",
"webpack://WaveSurfer/./src/util/style.js",
"webpack://WaveSurfer/./src/util/frame.js",
"webpack://WaveSurfer/./node_modules/debounce/index.js",
"webpack://WaveSurfer/./src/util/prevent-click.js",
"webpack://WaveSurfer/./src/drawer.multicanvas.js",
"webpack://WaveSurfer/./src/drawer.js",
"webpack://WaveSurfer/./src/mediaelement.js",
"webpack://WaveSurfer/./src/peakcache.js"
],
names: [
"root",
"factory",
"exports",
"module",
"define",
"amd",
"window",
"installedModules",
"__webpack_require__",
"moduleId",
"i",
"l",
"modules",
"call",
"m",
"c",
"d",
"name",
"getter",
"o",
"Object",
"defineProperty",
"enumerable",
"get",
"r",
"Symbol",
"toStringTag",
"value",
"t",
"mode",
"__esModule",
"ns",
"create",
"key",
"bind",
"n",
"object",
"property",
"prototype",
"hasOwnProperty",
"p",
"s",
"_ajax",
"_interopRequireDefault",
"_getId",
"_max",
"_min",
"_observer",
"_extend",
"_style",
"_requestAnimationFrame",
"_frame",
"_debounce",
"_preventClick",
"Observer",
"_classCallCheck",
"this",
"handlers",
"event",
"fn",
"_this",
"push",
"callback",
"un",
"e",
"length",
"splice",
"handler",
"_this2",
"on",
"_len",
"arguments",
"args",
"Array",
"_key",
"apply",
"setTimeout",
"_len2",
"_key2",
"forEach",
"requestAnimationFrame",
"webkitRequestAnimationFrame",
"mozRequestAnimationFrame",
"oRequestAnimationFrame",
"msRequestAnimationFrame",
"element",
"util",
"_interopRequireWildcard",
"PLAYING",
"PAUSED",
"FINISHED",
"WebAudio",
"params",
"_this$stateBehaviors",
"_this$states",
"_possibleConstructorReturn",
"_getPrototypeOf",
"audioContext",
"offlineAudioContext",
"stateBehaviors",
"_defineProperty",
"init",
"addOnAudioProcess",
"getPlayedPercents",
"duration",
"getDuration",
"getCurrentTime",
"startPosition",
"getPlayedTime",
"removeOnAudioProcess",
"fireEvent",
"ac",
"getAudioContext",
"lastPlay",
"currentTime",
"scheduledPause",
"states",
"analyser",
"buffer",
"filters",
"gainNode",
"mergedPeaks",
"offlineAc",
"peaks",
"playbackRate",
"scriptNode",
"source",
"splitPeaks",
"state",
"explicitDuration",
"AudioContext",
"webkitAudioContext",
"WaveSurferAudioContext",
"sampleRate",
"WaveSurferOfflineAudioContext",
"OfflineAudioContext",
"webkitOfflineAudioContext",
"createVolumeNode",
"createScriptNode",
"createAnalyserNode",
"setState",
"setPlaybackRate",
"audioRate",
"setLength",
"filter",
"disconnect",
"connect",
"setFilters",
"disconnectFilters",
"reduce",
"prev",
"curr",
"audioScriptProcessor",
"createScriptProcessor",
"scriptBufferSize",
"createJavaScriptNode",
"destination",
"onaudioprocess",
"time",
"pause",
"createAnalyser",
"createGain",
"createGainNode",
"deviceId",
"audio",
"Audio",
"setSinkId",
"Promise",
"reject",
"Error",
"autoplay",
"dest",
"createMediaStreamDestination",
"srcObject",
"stream",
"gain",
"setValueAtTime",
"arraybuffer",
"errback",
"getOfflineAudioContext",
"decodeAudioData",
"data",
"channels",
"numberOfChannels",
"first",
"last",
"newBuffer",
"createBuffer",
"sampleSize",
"sampleStep",
"chan",
"getChannelData",
"start",
"end",
"min",
"max",
"j",
"splitChannels",
"isPaused",
"unAll",
"disconnectSource",
"closeAudioContext",
"close",
"createSource",
"createBufferSource",
"noteGrainOn",
"stop",
"noteOff",
"adjustedTime",
"seekTo",
"resume",
"play",
"_drawer",
"_webaudio",
"_mediaelement",
"_peakcache",
"WaveSurfer",
"defaultParams",
"autoCenter",
"backend",
"barHeight",
"barGap",
"container",
"cursorColor",
"cursorWidth",
"dragSelection",
"fillParent",
"forceDecode",
"height",
"hideScrollbar",
"interact",
"loopSelection",
"maxCanvasWidth",
"mediaContainer",
"mediaControls",
"mediaType",
"minPxPerSec",
"normalize",
"partialRender",
"pixelRatio",
"devicePixelRatio",
"screen",
"deviceXDPI",
"logicalXDPI",
"plugins",
"progressColor",
"removeMediaElementOnDestroy",
"renderer",
"MultiCanvas",
"responsive",
"scrollParent",
"skipLength",
"waveColor",
"xhr",
"backends",
"MediaElement",
"extend",
"document",
"querySelector",
"savedVolume",
"isMuted",
"tmpEvents",
"currentAjax",
"drawer",
"peakCache",
"Drawer",
"Backend",
"initialisedPluginList",
"isDestroyed",
"isReady",
"prevWidth",
"_onResize",
"debounce",
"wrapper",
"clientWidth",
"_assertThisInitialized",
"registerPlugins",
"createDrawer",
"createBackend",
"createPeakCache",
"plugin",
"addPlugin",
"deferInit",
"initPlugin",
"_this3",
"instance",
"concat",
"staticProps",
"keys",
"pluginStaticProp",
"Instance",
"getOwnPropertyNames",
"destroyPlugin",
"destroy",
"_this4",
"_this5",
"addEventListener",
"drawBuffer",
"progress",
"_this6",
"supportsWebAudio",
"PeakCache",
"seconds",
"_this7",
"skip",
"offset",
"position",
"Math",
"seekAndCenter",
"recenter",
"_this8",
"isFinite",
"console",
"error",
"paused",
"oldScrollParent",
"newVolume",
"setVolume",
"getVolume",
"rate",
"getPlaybackRate",
"setMute",
"mute",
"color",
"updateCursor",
"setHeight",
"nominalWidth",
"round",
"parentWidth",
"getWidth",
"width",
"getScrollX",
"newRanges",
"addRangeToPeakCache",
"getPeaks",
"drawPeaks",
"pxPerSec",
"_this9",
"decodeArrayBuffer",
"loadDecodedBuffer",
"load",
"blob",
"_this10",
"reader",
"FileReader",
"onProgress",
"loadArrayBuffer",
"target",
"result",
"readAsArrayBuffer",
"empty",
"url",
"preload",
"preloadIgnoreReasons",
"Preload is not 'auto', 'none' or 'metadata'",
"indexOf",
"Peaks are not provided",
"Backend is not of type MediaElement",
"Url is not of type string",
"activeReasons",
"reason",
"warn",
"join",
"loadBuffer",
"loadMediaElement",
"_this11",
"action",
"once",
"getArrayBuffer",
"setPeaks",
"urlOrElt",
"_this12",
"elt",
"loadElt",
"src",
"err",
"_this13",
"_this14",
"ajax",
"responseType",
"statusText",
"percentComplete",
"lengthComputable",
"loaded",
"total",
"accuracy",
"noWindow",
"arr",
"map",
"val",
"json",
"JSON",
"stringify",
"open",
"encodeURIComponent",
"format",
"quality",
"getImage",
"abort",
"cancelAjax",
"clearTmpEvents",
"setWidth",
"destroyAllPlugins",
"removeEventListener",
"VERSION",
"__VERSION__",
"options",
"XMLHttpRequest",
"fired100",
"method",
"requestHeaders",
"header",
"setRequestHeader",
"withCredentials",
"status",
"response",
"send",
"random",
"toString",
"substring",
"values",
"largest",
"Infinity",
"smallest",
"Number",
"sources",
"el",
"styles",
"prop",
"style",
"func",
"default",
"wait",
"immediate",
"timeout",
"context",
"timestamp",
"later",
"Date",
"now",
"debounced",
"callNow",
"clear",
"clearTimeout",
"flush",
"preventClickHandler",
"stopPropagation",
"body",
"maxCanvasElementWidth",
"hasProgressCanvas",
"halfPixel",
"canvases",
"progressWave",
"createWrapper",
"createElements",
"appendChild",
"createElement",
"zIndex",
"left",
"top",
"bottom",
"overflow",
"display",
"boxSizing",
"borderRightStyle",
"pointerEvents",
"addCanvas",
"borderRightWidth",
"borderRightColor",
"totalWidth",
"requiredCanvases",
"ceil",
"removeCanvas",
"entry",
"canvasWidth",
"updateDimensions",
"clearWaveForEntry",
"leftOffset",
"wave",
"waveCtx",
"getContext",
"progressCtx",
"lastEntry",
"pop",
"parentElement",
"removeChild",
"elementWidth",
"canvas",
"offsetLeft",
"clearRect",
"channelIndex",
"prepareDraw",
"_ref",
"absmax",
"hasMinVals",
"offsetY",
"halfH",
"undefined",
"peakIndexScale",
"bar",
"barWidth",
"step",
"scale",
"peak",
"floor",
"h",
"fillRect",
"_ref2",
"reflectedPeaks",
"len",
"drawLine",
"setFillStyles",
"drawLineToContext",
"ctx",
"canvasStart",
"canvasEnd",
"beginPath",
"moveTo",
"lineTo",
"closePath",
"fill",
"x",
"y",
"startCanvas",
"endCanvas",
"intersection",
"x1",
"y1",
"x2",
"y2",
"fillRectToContext",
"frame",
"channelPeaks",
"some",
"fillStyle",
"type",
"images",
"toDataURL",
"lastPos",
"userSelect",
"webkitUserSelect",
"overflowX",
"overflowY",
"setupWrapperEvents",
"noPrevent",
"preventDefault",
"clientX",
"targetTouches",
"bbox",
"getBoundingClientRect",
"scrollLeft",
"scrollWidth",
"scrollbarHeight",
"offsetHeight",
"clientHeight",
"clientY",
"handleEvent",
"clearWave",
"drawBars",
"drawWave",
"percent",
"recenterOnPosition",
"half",
"maxScroll",
"updateSize",
"minPxDelta",
"pos",
"newPos",
"updateProgress",
"parentNode",
"media",
"volume",
"toLowerCase",
"elementPosition",
"onPlayEnd",
"createTimer",
"onAudioProcess",
"controls",
"prevMedia",
"_load",
"seekable",
"clearPlayEnd",
"promise",
"setPlayEnd",
"_onPlayEnd",
"_get",
"clearPeakCache",
"peakCacheRanges",
"peakCacheLength",
"uncachedRanges",
"item",
"sort",
"a",
"b",
"uncachedRangePairs",
"peakCacheRangePairs"
],
mappings: "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",
file: "wavesurfer.min.js",
sourcesContent: [
"(function webpackUniversalModuleDefinition(root, factory) { if(typeof exports === 'object' && typeof module === 'object') module.exports = factory(); else if(typeof define === 'function' && define.amd) define("WaveSurfer", [], factory); else if(typeof exports === 'object') exports["WaveSurfer"] = factory(); else root["WaveSurfer"] = factory(); })(window, function() { return ",
" // The module cache var installedModules = {}; // The require function function __webpack_require__(moduleId) { // Check if module is in cache if(installedModules[moduleId]) { return installedModules[moduleId].exports; } // Create a new module (and put it into the cache) var module = installedModules[moduleId] = { i: moduleId, l: false, exports: {} }; // Execute the module function modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded module.l = true; // Return the exports of the module return module.exports; } // expose the modules object (__webpack_modules__) __webpack_require__.m = modules; // expose the module cache __webpack_require__.c = installedModules; // define getter function for harmony exports __webpack_require__.d = function(exports, name, getter) { if(!__webpack_require__.o(exports, name)) { Object.defineProperty(exports, name, { enumerable: true, get: getter }); } }; // define __esModule on exports __webpack_require__.r = function(exports) { if(typeof Symbol !== 'undefined' && Symbol.toStringTag) { Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' }); } Object.defineProperty(exports, '__esModule', { value: true }); }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require __webpack_require__.t = function(value, mode) { if(mode & 1) value = __webpack_require__(value); if(mode & 8) return value; if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value; var ns = Object.create(null); __webpack_require__.r(ns); Object.defineProperty(ns, 'default', { enumerable: true, value: value }); if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key)); return ns; }; // getDefaultExport function for compatibility with non-harmony modules __webpack_require__.n = function(module) { var getter = module && module.__esModule ? function getDefault() { return module['default']; } : function getModuleExports() { return module; }; __webpack_require__.d(getter, 'a', getter); return getter; }; // Object.prototype.hasOwnProperty.call __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); }; // __webpack_public_path__ __webpack_require__.p = ""; // Load entry module and return exports return __webpack_require__(__webpack_require__.s = 4); ",
"export { default as ajax } from './ajax'; export { default as getId } from './get-id'; export { default as max } from './max'; export { default as min } from './min'; export { default as Observer } from './observer'; export { default as extend } from './extend'; export { default as style } from './style'; export { default as requestAnimationFrame } from './request-animation-frame'; export { default as frame } from './frame'; export { default as debounce } from 'debounce'; export { default as preventClick } from './prevent-click'; ",
"/** * @typedef {Object} ListenerDescriptor * @property {string} name The name of the event * @property {function} callback The callback * @property {function} un The function to call to remove the listener */ /** * Observer class */ export default class Observer { /** * Instantiate Observer */ constructor() { /** * @private * @todo Initialise the handlers here already and remove the conditional * assignment in `on()` */ this.handlers = null; } /** * Attach a handler function for an event. * * @param {string} event Name of the event to listen to * @param {function} fn The callback to trigger when the event is fired * @return {ListenerDescriptor} */ on(event, fn) { if (!this.handlers) { this.handlers = {}; } let handlers = this.handlers[event]; if (!handlers) { handlers = this.handlers[event] = []; } handlers.push(fn); // Return an event descriptor return { name: event, callback: fn, un: (e, fn) => this.un(e, fn) }; } /** * Remove an event handler. * * @param {string} event Name of the event the listener that should be * removed listens to * @param {function} fn The callback that should be removed */ un(event, fn) { if (!this.handlers) { return; } const handlers = this.handlers[event]; let i; if (handlers) { if (fn) { for (i = handlers.length - 1; i >= 0; i--) { if (handlers[i] == fn) { handlers.splice(i, 1); } } } else { handlers.length = 0; } } } /** * Remove all event handlers. */ unAll() { this.handlers = null; } /** * Attach a handler to an event. The handler is executed at most once per * event type. * * @param {string} event The event to listen to * @param {function} handler The callback that is only to be called once * @return {ListenerDescriptor} */ once(event, handler) { const fn = (...args) => { /* eslint-disable no-invalid-this */ handler.apply(this, args); /* eslint-enable no-invalid-this */ setTimeout(() => { this.un(event, fn); }, 0); }; return this.on(event, fn); } /** * Manually fire an event * * @param {string} event The event to fire manually * @param {...any} args The arguments with which to call the listeners */ fireEvent(event, ...args) { if (!this.handlers) { return; } const handlers = this.handlers[event]; handlers && handlers.forEach(fn => { fn(...args); }); } } ",
"/** * Returns the requestAnimationFrame function for the browser, or a shim with * setTimeout if none is found * * @return {function} */ export default ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || ((callback, element) => setTimeout(callback, 1000 / 60)) ).bind(window); ",
"import * as util from './util'; // using constants to prevent someone writing the string wrong const PLAYING = 'playing'; const PAUSED = 'paused'; const FINISHED = 'finished'; /** * WebAudio backend * * @extends {Observer} */ export default class WebAudio extends util.Observer { /** @private */ static scriptBufferSize = 256; /** @private */ audioContext = null; /** @private */ offlineAudioContext = null; /** @private */ stateBehaviors = { [PLAYING]: { init() { this.addOnAudioProcess(); }, getPlayedPercents() { const duration = this.getDuration(); return this.getCurrentTime() / duration || 0; }, getCurrentTime() { return this.startPosition + this.getPlayedTime(); } }, [PAUSED]: { init() { this.removeOnAudioProcess(); }, getPlayedPercents() { const duration = this.getDuration(); return this.getCurrentTime() / duration || 0; }, getCurrentTime() { return this.startPosition; } }, [FINISHED]: { init() { this.removeOnAudioProcess(); this.fireEvent('finish'); }, getPlayedPercents() { return 1; }, getCurrentTime() { return this.getDuration(); } } }; /** * Does the browser support this backend * * @return {boolean} */ supportsWebAudio() { return !!(window.AudioContext || window.webkitAudioContext); } /** * Get the audio context used by this backend or create one * * @return {AudioContext} */ getAudioContext() { if (!window.WaveSurferAudioContext) { window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)(); } return window.WaveSurferAudioContext; } /** * Get the offline audio context used by this backend or create one * * @param {number} sampleRate * @return {OfflineAudioContext} */ getOfflineAudioContext(sampleRate) { if (!window.WaveSurferOfflineAudioContext) { window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate); } return window.WaveSurferOfflineAudioContext; } /** * Construct the backend * * @param {WavesurferParams} params */ constructor(params) { super(); /** @private */ this.params = params; /** @private */ this.ac = params.audioContext || this.getAudioContext(); /**@private */ this.lastPlay = this.ac.currentTime; /** @private */ this.startPosition = 0; /** @private */ this.scheduledPause = null; /** @private */ this.states = { [PLAYING]: Object.create(this.stateBehaviors[PLAYING]), [PAUSED]: Object.create(this.stateBehaviors[PAUSED]), [FINISHED]: Object.create(this.stateBehaviors[FINISHED]) }; /** @private */ this.analyser = null; /** @private */ this.buffer = null; /** @private */ this.filters = []; /** @private */ this.gainNode = null; /** @private */ this.mergedPeaks = null; /** @private */ this.offlineAc = null; /** @private */ this.peaks = null; /** @private */ this.playbackRate = 1; /** @private */ this.analyser = null; /** @private */ this.scriptNode = null; /** @private */ this.source = null; /** @private */ this.splitPeaks = []; /** @private */ this.state = null; /** @private */ this.explicitDuration = null; } /** * Initialise the backend, called in `wavesurfer.createBackend()` */ init() { this.createVolumeNode(); this.createScriptNode(); this.createAnalyserNode(); this.setState(PAUSED); this.setPlaybackRate(this.params.audioRate); this.setLength(0); } /** @private */ disconnectFilters() { if (this.filters) { this.filters.forEach(filter => { filter && filter.disconnect(); }); this.filters = null; // Reconnect direct path this.analyser.connect(this.gainNode); } } /** @private */ setState(state) { if (this.state !== this.states[state]) { this.state = this.states[state]; this.state.init.call(this); } } /** * Unpacked `setFilters()` * * @param {...AudioNode} filters */ setFilter(...filters) { this.setFilters(filters); } /** * Insert custom Web Audio nodes into the graph * * @param {AudioNode[]} filters Packed filters array * @example * const lowpass = wavesurfer.backend.ac.createBiquadFilter(); * wavesurfer.backend.setFilter(lowpass); */ setFilters(filters) { // Remove existing filters this.disconnectFilters(); // Insert filters if filter array not empty if (filters && filters.length) { this.filters = filters; // Disconnect direct path before inserting filters this.analyser.disconnect(); // Connect each filter in turn filters .reduce((prev, curr) => { prev.connect(curr); return curr; }, this.analyser) .connect(this.gainNode); } } /** @private */ createScriptNode() { if (this.params.audioScriptProcessor) { this.scriptNode = this.params.audioScriptProcessor; } else { if (this.ac.createScriptProcessor) { this.scriptNode = this.ac.createScriptProcessor( WebAudio.scriptBufferSize ); } else { this.scriptNode = this.ac.createJavaScriptNode( WebAudio.scriptBufferSize ); } } this.scriptNode.connect(this.ac.destination); } /** @private */ addOnAudioProcess() { this.scriptNode.onaudioprocess = () => { const time = this.getCurrentTime(); if (time >= this.getDuration()) { this.setState(FINISHED); this.fireEvent('pause'); } else if (time >= this.scheduledPause) { this.pause(); } else if (this.state === this.states[PLAYING]) { this.fireEvent('audioprocess', time); } }; } /** @private */ removeOnAudioProcess() { this.scriptNode.onaudioprocess = null; } /** @private */ createAnalyserNode() { this.analyser = this.ac.createAnalyser(); this.analyser.connect(this.gainNode); } /** * Create the gain node needed to control the playback volume. * * @private */ createVolumeNode() { // Create gain node using the AudioContext if (this.ac.createGain) { this.gainNode = this.ac.createGain(); } else { this.gainNode = this.ac.createGainNode(); } // Add the gain node to the graph this.gainNode.connect(this.ac.destination); } /** * Set the sink id for the media player * * @param {string} deviceId String value representing audio device id. */ setSinkId(deviceId) { if (deviceId) { /** * The webaudio API doesn't currently support setting the device * output. Here we create an HTMLAudioElement, connect the * webaudio stream to that element and setSinkId there. */ let audio = new window.Audio(); if (!audio.setSinkId) { return Promise.reject( new Error('setSinkId is not supported in your browser') ); } audio.autoplay = true; var dest = this.ac.createMediaStreamDestination(); this.gainNode.disconnect(); this.gainNode.connect(dest); audio.srcObject = dest.stream; return audio.setSinkId(deviceId); } else { return Promise.reject(new Error('Invalid deviceId: ' + deviceId)); } } /** * Set the audio volume * * @param {number} value A floating point value between 0 and 1. */ setVolume(value) { this.gainNode.gain.setValueAtTime(value, this.ac.currentTime); } /** * Get the current volume * * @return {number} value A floating point value between 0 and 1. */ getVolume() { return this.gainNode.gain.value; } /** @private */ decodeArrayBuffer(arraybuffer, callback, errback) { if (!this.offlineAc) { this.offlineAc = this.getOfflineAudioContext( this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100 ); } this.offlineAc.decodeAudioData( arraybuffer, data => callback(data), errback ); } /** * Set pre-decoded peaks * * @param {number[]|number[][]} peaks * @param {?number} duration */ setPeaks(peaks, duration) { this.explicitDuration = duration; this.peaks = peaks; } /** * Set the rendered length (different from the length of the audio). * * @param {number} length */ setLength(length) { // No resize, we can preserve the cached peaks. if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) { return; } this.splitPeaks = []; this.mergedPeaks = []; // Set the last element of the sparse array so the peak arrays are // appropriately sized for other calculations. const channels = this.buffer ? this.buffer.numberOfChannels : 1; let c; for (c = 0; c < channels; c++) { this.splitPeaks[c] = []; this.splitPeaks[c][2 * (length - 1)] = 0; this.splitPeaks[c][2 * (length - 1) + 1] = 0; } this.mergedPeaks[2 * (length - 1)] = 0; this.mergedPeaks[2 * (length - 1) + 1] = 0; } /** * Compute the max and min value of the waveform when broken into <length> subranges. * * @param {number} length How many subranges to break the waveform into. * @param {number} first First sample in the required range. * @param {number} last Last sample in the required range. * @return {number[]|number[][]} Array of 2*<length> peaks or array of arrays of * peaks consisting of (max, min) values for each subrange. */ getPeaks(length, first, last) { if (this.peaks) { return this.peaks; } first = first || 0; last = last || length - 1; this.setLength(length); /** * The following snippet fixes a buffering data issue on the Safari * browser which returned undefined It creates the missing buffer based * on 1 channel, 4096 samples and the sampleRate from the current * webaudio context 4096 samples seemed to be the best fit for rendering * will review this code once a stable version of Safari TP is out */ if (!this.buffer.length) { const newBuffer = this.createBuffer(1, 4096, this.sampleRate); this.buffer = newBuffer.buffer; } const sampleSize = this.buffer.length / length; const sampleStep = ~~(sampleSize / 10) || 1; const channels = this.buffer.numberOfChannels; let c; for (c = 0; c < channels; c++) { const peaks = this.splitPeaks[c]; const chan = this.buffer.getChannelData(c); let i; for (i = first; i <= last; i++) { const start = ~~(i * sampleSize); const end = ~~(start + sampleSize); let min = 0; let max = 0; let j; for (j = start; j < end; j += sampleStep) { const value = chan[j]; if (value > max) { max = value; } if (value < min) { min = value; } } peaks[2 * i] = max; peaks[2 * i + 1] = min; if (c == 0 || max > this.mergedPeaks[2 * i]) { this.mergedPeaks[2 * i] = max; } if (c == 0 || min < this.mergedPeaks[2 * i + 1]) { this.mergedPeaks[2 * i + 1] = min; } } } return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks; } /** * Get the position from 0 to 1 * * @return {number} */ getPlayedPercents() { return this.state.getPlayedPercents.call(this); } /** @private */ disconnectSource() { if (this.source) { this.source.disconnect(); } } /** * This is called when wavesurfer is destroyed */ destroy() { if (!this.isPaused()) { this.pause(); } this.unAll(); this.buffer = null; this.disconnectFilters(); this.disconnectSource(); this.gainNode.disconnect(); this.scriptNode.disconnect(); this.analyser.disconnect(); // close the audioContext if closeAudioContext option is set to true if (this.params.closeAudioContext) { // check if browser supports AudioContext.close() if ( typeof this.ac.close === 'function' && this.ac.state != 'closed' ) { this.ac.close(); } // clear the reference to the audiocontext this.ac = null; // clear the actual audiocontext, either passed as param or the // global singleton if (!this.params.audioContext) { window.WaveSurferAudioContext = null; } else { this.params.audioContext = null; } // clear the offlineAudioContext window.WaveSurferOfflineAudioContext = null; } } /** * Loaded a decoded audio buffer * * @param {Object} buffer */ load(buffer) { this.startPosition = 0; this.lastPlay = this.ac.currentTime; this.buffer = buffer; this.createSource(); } /** @private */ createSource() { this.disconnectSource(); this.source = this.ac.createBufferSource(); // adjust for old browsers this.source.start = this.source.start || this.source.noteGrainOn; this.source.stop = this.source.stop || this.source.noteOff; this.source.playbackRate.setValueAtTime( this.playbackRate, this.ac.currentTime ); this.source.buffer = this.buffer; this.source.connect(this.analyser); } /** * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()` * * @return {boolean} */ isPaused() { return this.state !== this.states[PLAYING]; } /** * Used by `wavesurfer.getDuration()` * * @return {number} */ getDuration() { if (!this.buffer) { if (this.explicitDuration) { return this.explicitDuration; } return 0; } return this.buffer.duration; } /** * Used by `wavesurfer.seekTo()` * * @param {number} start Position to start at in seconds * @param {number} end Position to end at in seconds * @return {{start: number, end: number}} */ seekTo(start, end) { if (!this.buffer) { return; } this.scheduledPause = null; if (start == null) { start = this.getCurrentTime(); if (start >= this.getDuration()) { start = 0; } } if (end == null) { end = this.getDuration(); } this.startPosition = start; this.lastPlay = this.ac.currentTime; if (this.state === this.states[FINISHED]) { this.setState(PAUSED); } return { start: start, end: end }; } /** * Get the playback position in seconds * * @return {number} */ getPlayedTime() { return (this.ac.currentTime - this.lastPlay) * this.playbackRate; } /** * Plays the loaded audio region. * * @param {number} start Start offset in seconds, relative to the beginning * of a clip. * @param {number} end When to stop relative to the beginning of a clip. */ play(start, end) { if (!this.buffer) { return; } // need to re-create source on each playback this.createSource(); const adjustedTime = this.seekTo(start, end); start = adjustedTime.start; end = adjustedTime.end; this.scheduledPause = end; this.source.start(0, start, end - start); if (this.ac.state == 'suspended') { this.ac.resume && this.ac.resume(); } this.setState(PLAYING); this.fireEvent('play'); } /** * Pauses the loaded audio. */ pause() { this.scheduledPause = null; this.startPosition += this.getPlayedTime(); this.source && this.source.stop(0); this.setState(PAUSED); this.fireEvent('pause'); } /** * Returns the current time in seconds relative to the audio-clip's * duration. * * @return {number} */ getCurrentTime() { return this.state.getCurrentTime.call(this); } /** * Returns the current playback rate. (0=no playback, 1=normal playback) * * @return {number} */ getPlaybackRate() { return this.playbackRate; } /** * Set the audio source playback rate. * * @param {number} value */ setPlaybackRate(value) { value = value || 1; if (this.isPaused()) { this.playbackRate = value; } else { this.pause(); this.playbackRate = value; this.play(); } } } ",
"import * as util from './util'; import MultiCanvas from './drawer.multicanvas'; import WebAudio from './webaudio'; import MediaElement from './mediaelement'; import PeakCache from './peakcache'; /* * This work is licensed under a BSD-3-Clause License. */ /** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */ /** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */ /** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */ /** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */ /** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */ /** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */ /** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */ /** * @typedef {Object} WavesurferParams * @property {AudioContext} audioContext=null Use your own previously * initialized AudioContext or leave blank. * @property {number} audioRate=1 Speed at which to play audio. Lower number is * slower. * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously * initialized ScriptProcessorNode or leave blank. * @property {boolean} autoCenter=true If a scrollbar is present, center the * waveform around the progress * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases * you don't have to set this manually. MediaElement is a fallback for * unsupported browsers. * @property {number} barHeight=1 The height of the wave * @property {number} barGap=null The optional spacing between bars of the wave, * if not provided will be calculated in legacy format. * @property {boolean} closeAudioContext=false Close and nullify all audio * contexts when the destroy method is called. * @property {!string|HTMLElement} container CSS selector or HTML element where * the waveform should be drawn. This is the only required parameter. * @property {string} cursorColor='#333' The fill color of the cursor indicating * the playhead position. * @property {number} cursorWidth=1 Measured in pixels. * @property {boolean} fillParent=true Whether to fill the entire container or * draw only according to `minPxPerSec`. * @property {boolean} forceDecode=false Force decoding of audio using web audio * when zooming to get a more detailed waveform. * @property {number} height=128 The height of the waveform. Measured in * pixels. * @property {boolean} hideScrollbar=false Whether to hide the horizontal * scrollbar when one would normally be shown. * @property {boolean} interact=true Whether the mouse interaction will be * enabled at initialization. You can switch this parameter at any time later * on. * @property {boolean} loopSelection=true (Use with regions plugin) Enable * looping of selected regions * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next * even integer). If the waveform is longer than this value, additional canvases * will be used to render the waveform, which is useful for very large waveforms * that may be too wide for browsers to draw on a single canvas. * @property {boolean} mediaControls=false (Use with backend `MediaElement`) * this enables the native controls for the media element * @property {string} mediaType='audio' (Use with backend `MediaElement`) * `'audio'|'video'` * @property {number} minPxPerSec=20 Minimum number of pixels per second of * audio. * @property {boolean} normalize=false If true, normalize by the maximum peak * instead of 1.0. * @property {boolean} partialRender=false Use the PeakCache to improve * rendering speed of large waveforms * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to * calculate display * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to * register during instantiation, they will be directly initialised unless they * are added with the `deferInit` property set to true. * @property {string} progressColor='#555' The fill color of the part of the * waveform behind the cursor. * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the * media element in the DOM when the player is destroyed. This is useful when * reusing an existing media element via the `loadMediaElement` method. * @property {Object} renderer=MultiCanvas Can be used to inject a custom * renderer. * @property {boolean|number} responsive=false If set to `true` resize the * waveform, when the window is resized. This is debounced with a `100ms` * timeout by default. If this parameter is a number it represents that timeout. * @property {boolean} scrollParent=false Whether to scroll the container with a * lengthy waveform. Otherwise the waveform is shrunk to the container width * (see fillParent). * @property {number} skipLength=2 Number of seconds to skip with the * skipForward() and skipBackward() methods. * @property {boolean} splitChannels=false Render with separate waveforms for * the channels of the audio * @property {string} waveColor='#999' The fill color of the waveform after the * cursor. * @property {object} xhr={} XHR options. */ /** * @typedef {Object} PluginDefinition * @desc The Object used to describe a plugin * @example wavesurfer.addPlugin(pluginDefinition); * @property {string} name The name of the plugin, the plugin instance will be * added as a property to the wavesurfer instance under this name * @property {?Object} staticProps The properties that should be added to the * wavesurfer instance as static properties * @property {?boolean} deferInit Don't initialise plugin * automatically * @property {Object} params={} The plugin parameters, they are the first parameter * passed to the plugin class constructor function * @property {PluginClass} instance The plugin instance factory, is called with * the dependency specified in extends. Returns the plugin class. */ /** * @interface PluginClass * * @desc This is the interface which is implemented by all plugin classes. Note * that this only turns into an observer after being passed through * `wavesurfer.addPlugin`. * * @extends {Observer} */ class PluginClass { /** * Plugin definition factory * * This function must be used to create a plugin definition which can be * used by wavesurfer to correctly instantiate the plugin. * * @param {Object} params={} The plugin params (specific to the plugin) * @return {PluginDefinition} an object representing the plugin */ create(params) {} /** * Construct the plugin * * @param {Object} params={} The plugin params (specific to the plugin) * @param {Object} ws The wavesurfer instance */ constructor(params, ws) {} /** * Initialise the plugin * * Start doing something. This is called by * `wavesurfer.initPlugin(pluginName)` */ init() {} /** * Destroy the plugin instance * * Stop doing something. This is called by * `wavesurfer.destroyPlugin(pluginName)` */ destroy() {} } /** * WaveSurfer core library class * * @extends {Observer} * @example * const params = { * container: '#waveform', * waveColor: 'violet', * progressColor: 'purple' * }; * * // initialise like this * const wavesurfer = WaveSurfer.create(params); * * // or like this ... * const wavesurfer = new WaveSurfer(params); * wavesurfer.init(); * * // load audio file * wavesurfer.load('example/media/demo.wav'); */ export default class WaveSurfer extends util.Observer { /** @private */ defaultParams = { audioContext: null, audioScriptProcessor: null, audioRate: 1, autoCenter: true, backend: 'WebAudio', barHeight: 1, barGap: null, container: null, cursorColor: '#333', cursorWidth: 1, dragSelection: true, fillParent: true, forceDecode: false, height: 128, hideScrollbar: false, interact: true, loopSelection: true, maxCanvasWidth: 4000, mediaContainer: null, mediaControls: false, mediaType: 'audio', minPxPerSec: 20, normalize: false, partialRender: false, pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI, plugins: [], progressColor: '#555', removeMediaElementOnDestroy: true, renderer: MultiCanvas, responsive: false, scrollParent: false, skipLength: 2, splitChannels: false, waveColor: '#999', xhr: {} }; /** @private */ backends = { MediaElement, WebAudio }; /** * Instantiate this class, call its `init` function and returns it * * @param {WavesurferParams} params * @return {Object} WaveSurfer instance * @example const wavesurfer = WaveSurfer.create(params); */ static create(params) { const wavesurfer = new WaveSurfer(params); return wavesurfer.init(); } /** * The library version number is available as a static property of the * WaveSurfer class * * @type {String} * @example * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION); */ static VERSION = __VERSION__; /** * Functions in the `util` property are available as a prototype property to * all instances * * @type {Object} * @example * const wavesurfer = WaveSurfer.create(params); * wavesurfer.util.style(myElement, { background: 'blue' }); */ util = util; /** * Functions in the `util` property are available as a static property of the * WaveSurfer class * * @type {Object} * @example * WaveSurfer.util.style(myElement, { background: 'blue' }); */ static util = util; /** * Initialise wavesurfer instance * * @param {WavesurferParams} params Instantiation options for wavesurfer * @example * const wavesurfer = new WaveSurfer(params); * @returns {this} */ constructor(params) { super(); /** * Extract relevant parameters (or defaults) * @private */ this.params = util.extend({}, this.defaultParams, params); /** @private */ this.container = 'string' == typeof params.container ? document.querySelector(this.params.container) : this.params.container; if (!this.container) { throw new Error('Container element not found'); } if (this.params.mediaContainer == null) { /** @private */ this.mediaContainer = this.container; } else if (typeof this.params.mediaContainer == 'string') { /** @private */ this.mediaContainer = document.querySelector( this.params.mediaContainer ); } else { /** @private */ this.mediaContainer = this.params.mediaContainer; } if (!this.mediaContainer) { throw new Error('Media Container element not found'); } if (this.params.maxCanvasWidth <= 1) { throw new Error('maxCanvasWidth must be greater than 1'); } else if (this.params.maxCanvasWidth % 2 == 1) { throw new Error('maxCanvasWidth must be an even number'); } /** * @private Used to save the current volume when muting so we can * restore once unmuted * @type {number} */ this.savedVolume = 0; /** * @private The current muted state * @type {boolean} */ this.isMuted = false; /** * @private Will hold a list of event descriptors that need to be * canceled on subsequent loads of audio * @type {Object[]} */ this.tmpEvents = []; /** * @private Holds any running audio downloads * @type {Observer} */ this.currentAjax = null; /** @private */ this.arraybuffer = null; /** @private */ this.drawer = null; /** @private */ this.backend = null; /** @private */ this.peakCache = null; // cache constructor objects if (typeof this.params.renderer !== 'function') { throw new Error('Renderer parameter is invalid'); } /** * @private The uninitialised Drawer class */ this.Drawer = this.params.renderer; /** * @private The uninitialised Backend class */ this.Backend = this.backends[this.params.backend]; /** * @private map of plugin names that are currently initialised */ this.initialisedPluginList = {}; /** @private */ this.isDestroyed = false; /** @private */ this.isReady = false; // responsive debounced event listener. If this.params.responsive is not // set, this is never called. Use 100ms or this.params.responsive as // timeout for the debounce function. let prevWidth = 0; this._onResize = util.debounce( () => { if ( prevWidth != this.drawer.wrapper.clientWidth && !this.params.scrollParent ) { prevWidth = this.drawer.wrapper.clientWidth; this.drawer.fireEvent('redraw'); } }, typeof this.params.responsive === 'number' ? this.params.responsive : 100 ); return this; } /** * Initialise the wave * * @example * var wavesurfer = new WaveSurfer(params); * wavesurfer.init(); * @return {this} */ init() { this.registerPlugins(this.params.plugins); this.createDrawer(); this.createBackend(); this.createPeakCache(); return this; } /** * Add and initialise array of plugins (if `plugin.deferInit` is falsey), * this function is called in the init function of wavesurfer * * @param {PluginDefinition[]} plugins An array of plugin definitions * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions * @return {this} */ registerPlugins(plugins) { // first instantiate all the plugins plugins.forEach(plugin => this.addPlugin(plugin)); // now run the init functions plugins.forEach(plugin => { // call init function of the plugin if deferInit is falsey // in that case you would manually use initPlugins() if (!plugin.deferInit) { this.initPlugin(plugin.name); } }); this.fireEvent('plugins-registered', plugins); return this; } /** * Add a plugin object to wavesurfer * * @param {PluginDefinition} plugin A plugin definition * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added * @example wavesurfer.addPlugin(WaveSurfer.minimap()); * @return {this} */ addPlugin(plugin) { if (!plugin.name) { throw new Error('Plugin does not have a name!'); } if (!plugin.instance) { throw new Error( `Plugin ${plugin.name} does not have an instance property!` ); } // staticProps properties are applied to wavesurfer instance if (plugin.staticProps) { Object.keys(plugin.staticProps).forEach(pluginStaticProp => { /** * Properties defined in a plugin definition's `staticProps` property are added as * staticProps properties of the WaveSurfer instance */ this[pluginStaticProp] = plugin.staticProps[pluginStaticProp]; }); } const Instance = plugin.instance; // turn the plugin instance into an observer const observerPrototypeKeys = Object.getOwnPropertyNames( util.Observer.prototype ); observerPrototypeKeys.forEach(key => { Instance.prototype[key] = util.Observer.prototype[key]; }); /** * Instantiated plugin classes are added as a property of the wavesurfer * instance * @type {Object} */ this[plugin.name] = new Instance(plugin.params || {}, this); this.fireEvent('plugin-added', plugin.name); return this; } /** * Initialise a plugin * * @param {string} name A plugin name * @emits WaveSurfer#plugin-initialised * @example wavesurfer.initPlugin('minimap'); * @return {this} */ initPlugin(name) { if (!this[name]) { throw new Error(`Plugin ${name} has not been added yet!`); } if (this.initialisedPluginList[name]) { // destroy any already initialised plugins this.destroyPlugin(name); } this[name].init(); this.initialisedPluginList[name] = true; this.fireEvent('plugin-initialised', name); return this; } /** * Destroy a plugin * * @param {string} name A plugin name * @emits WaveSurfer#plugin-destroyed * @example wavesurfer.destroyPlugin('minimap'); * @returns {this} */ destroyPlugin(name) { if (!this[name]) { throw new Error( `Plugin ${name} has not been added yet and cannot be destroyed!` ); } if (!this.initialisedPluginList[name]) { throw new Error( `Plugin ${name} is not active and cannot be destroyed!` ); } if (typeof this[name].destroy !== 'function') { throw new Error(`Plugin ${name} does not have a destroy function!`); } this[name].destroy(); delete this.initialisedPluginList[name]; this.fireEvent('plugin-destroyed', name); return this; } /** * Destroy all initialised plugins. Convenience function to use when * wavesurfer is removed * * @private */ destroyAllPlugins() { Object.keys(this.initialisedPluginList).forEach(name => this.destroyPlugin(name) ); } /** * Create the drawer and draw the waveform * * @private * @emits WaveSurfer#drawer-created */ createDrawer() { this.drawer = new this.Drawer(this.container, this.params); this.drawer.init(); this.fireEvent('drawer-created', this.drawer); if (this.params.responsive !== false) { window.addEventListener('resize', this._onResize, true); window.addEventListener('orientationchange', this._onResize, true); } this.drawer.on('redraw', () => { this.drawBuffer(); this.drawer.progress(this.backend.getPlayedPercents()); }); // Click-to-seek this.drawer.on('click', (e, progress) => { setTimeout(() => this.seekTo(progress), 0); }); // Relay the scroll event from the drawer this.drawer.on('scroll', e => { if (this.params.partialRender) { this.drawBuffer(); } this.fireEvent('scroll', e); }); } /** * Create the backend * * @private * @emits WaveSurfer#backend-created */ createBackend() { if (this.backend) { this.backend.destroy(); } // Back compat if (this.params.backend == 'AudioElement') { this.params.backend = 'MediaElement'; } if ( this.params.backend == 'WebAudio' && !this.Backend.prototype.supportsWebAudio.call(null) ) { this.params.backend = 'MediaElement'; } this.backend = new this.Backend(this.params); this.backend.init(); this.fireEvent('backend-created', this.backend); this.backend.on('finish', () => { this.drawer.progress(this.backend.getPlayedPercents()); this.fireEvent('finish'); }); this.backend.on('play', () => this.fireEvent('play')); this.backend.on('pause', () => this.fireEvent('pause')); this.backend.on('audioprocess', time => { this.drawer.progress(this.backend.getPlayedPercents()); this.fireEvent('audioprocess', time); }); } /** * Create the peak cache * * @private */ createPeakCache() { if (this.params.partialRender) { this.peakCache = new PeakCache(); } } /** * Get the duration of the audio clip * * @example const duration = wavesurfer.getDuration(); * @return {number} Duration in seconds */ getDuration() { return this.backend.getDuration(); } /** * Get the current playback position * * @example const currentTime = wavesurfer.getCurrentTime(); * @return {number} Playback position in seconds */ getCurrentTime() { return this.backend.getCurrentTime(); } /** * Set the current play time in seconds. * * @param {number} seconds A positive number in seconds. E.g. 10 means 10 * seconds, 60 means 1 minute */ setCurrentTime(seconds) { if (seconds >= this.getDuration()) { this.seekTo(1); } else { this.seekTo(seconds / this.getDuration()); } } /** * Starts playback from the current position. Optional start and end * measured in seconds can be used to set the range of audio to play. * * @param {?number} start Position to start at * @param {?number} end Position to end at * @emits WaveSurfer#interaction * @return {Promise} * @example * // play from second 1 to 5 * wavesurfer.play(1, 5); */ play(start, end) { this.fireEvent('interaction', () => this.play(start, end)); return this.backend.play(start, end); } /** * Stops playback * * @example wavesurfer.pause(); * @return {Promise} */ pause() { if (!this.backend.isPaused()) { return this.backend.pause(); } } /** * Toggle playback * * @example wavesurfer.playPause(); * @return {Promise} */ playPause() { return this.backend.isPaused() ? this.play() : this.pause(); } /** * Get the current playback state * * @example const isPlaying = wavesurfer.isPlaying(); * @return {boolean} False if paused, true if playing */ isPlaying() { return !this.backend.isPaused(); } /** * Skip backward * * @param {?number} seconds Amount to skip back, if not specified `skipLength` * is used * @example wavesurfer.skipBackward(); */ skipBackward(seconds) { this.skip(-seconds || -this.params.skipLength); } /** * Skip forward * * @param {?number} seconds Amount to skip back, if not specified `skipLength` * is used * @example wavesurfer.skipForward(); */ skipForward(seconds) { this.skip(seconds || this.params.skipLength); } /** * Skip a number of seconds from the current position (use a negative value * to go backwards). * * @param {number} offset Amount to skip back or forwards * @example * // go back 2 seconds * wavesurfer.skip(-2); */ skip(offset) { const duration = this.getDuration() || 1; let position = this.getCurrentTime() || 0; position = Math.max(0, Math.min(duration, position + (offset || 0))); this.seekAndCenter(position / duration); } /** * Seeks to a position and centers the view * * @param {number} progress Between 0 (=beginning) and 1 (=end) * @example * // seek and go to the middle of the audio * wavesurfer.seekTo(0.5); */ seekAndCenter(progress) { this.seekTo(progress); this.drawer.recenter(progress); } /** * Seeks to a position * * @param {number} progress Between 0 (=beginning) and 1 (=end) * @emits WaveSurfer#interaction * @emits WaveSurfer#seek * @example * // seek to the middle of the audio * wavesurfer.seekTo(0.5); */ seekTo(progress) { // return an error if progress is not a number between 0 and 1 if ( typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1 ) { return console.error( 'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!' ); } this.fireEvent('interaction', () => this.seekTo(progress)); const paused = this.backend.isPaused(); // avoid draw wrong position while playing backward seeking if (!paused) { this.backend.pause(); } // avoid small scrolls while paused seeking const oldScrollParent = this.params.scrollParent; this.params.scrollParent = false; this.backend.seekTo(progress * this.getDuration()); this.drawer.progress(progress); if (!paused) { this.backend.play(); } this.params.scrollParent = oldScrollParent; this.fireEvent('seek', progress); } /** * Stops and goes to the beginning. * * @example wavesurfer.stop(); */ stop() { this.pause(); this.seekTo(0); this.drawer.progress(0); } /** * Set the playback volume. * * @param {string} deviceId String value representing underlying output device */ setSinkId(deviceId) { return this.backend.setSinkId(deviceId); } /** * Set the playback volume. * * @param {number} newVolume A value between 0 and 1, 0 being no * volume and 1 being full volume. * @emits WaveSurfer#volume */ setVolume(newVolume) { this.backend.setVolume(newVolume); this.fireEvent('volume', newVolume); } /** * Get the playback volume. * * @return {number} A value between 0 and 1, 0 being no * volume and 1 being full volume. */ getVolume() { return this.backend.getVolume(); } /** * Set the playback rate. * * @param {number} rate A positive number. E.g. 0.5 means half the normal * speed, 2 means double speed and so on. * @example wavesurfer.setPlaybackRate(2); */ setPlaybackRate(rate) { this.backend.setPlaybackRate(rate); } /** * Get the playback rate. * * @return {number} */ getPlaybackRate() { return this.backend.getPlaybackRate(); } /** * Toggle the volume on and off. If not currently muted it will save the * current volume value and turn the volume off. If currently muted then it * will restore the volume to the saved value, and then rest the saved * value. * * @example wavesurfer.toggleMute(); */ toggleMute() { this.setMute(!this.isMuted); } /** * Enable or disable muted audio * * @param {boolean} mute * @emits WaveSurfer#volume * @emits WaveSurfer#mute * @example * // unmute * wavesurfer.setMute(false); */ setMute(mute) { // ignore all muting requests if the audio is already in that state if (mute === this.isMuted) { this.fireEvent('mute', this.isMuted); return; } if (mute) { // If currently not muted then save current volume, // turn off the volume and update the mute properties this.savedVolume = this.backend.getVolume(); this.backend.setVolume(0); this.isMuted = true; this.fireEvent('volume', 0); } else { // If currently muted then restore to the saved volume // and update the mute properties this.backend.setVolume(this.savedVolume); this.isMuted = false; this.fireEvent('volume', this.savedVolume); } this.fireEvent('mute', this.isMuted); } /** * Get the current mute status. * * @example const isMuted = wavesurfer.getMute(); * @return {boolean} */ getMute() { return this.isMuted; } /** * Get the current ready status. * * @example const isReady = wavesurfer.isReady(); * @return {boolean} */ isReady() { return this.isReady; } /** * Get the list of current set filters as an array. * * Filters must be set with setFilters method first * * @return {array} */ getFilters() { return this.backend.filters || []; } /** * Toggles `scrollParent` and redraws * * @example wavesurfer.toggleScroll(); */ toggleScroll() { this.params.scrollParent = !this.params.scrollParent; this.drawBuffer(); } /** * Toggle mouse interaction * * @example wavesurfer.toggleInteraction(); */ toggleInteraction() { this.params.interact = !this.params.interact; } /** * Get the fill color of the waveform after the cursor. * * @return {string} A CSS color string. */ getWaveColor() { return this.params.waveColor; } /** * Set the fill color of the waveform after the cursor. * * @param {string} color A CSS color string. * @example wavesurfer.setWaveColor('#ddd'); */ setWaveColor(color) { this.params.waveColor = color; this.drawBuffer(); } /** * Get the fill color of the waveform behind the cursor. * * @return {string} A CSS color string. */ getProgressColor() { return this.params.progressColor; } /** * Set the fill color of the waveform behind the cursor. * * @param {string} color A CSS color string. * @example wavesurfer.setProgressColor('#400'); */ setProgressColor(color) { this.params.progressColor = color; this.drawBuffer(); } /** * Get the fill color of the cursor indicating the playhead * position. * * @return {string} A CSS color string. */ getCursorColor() { return this.params.cursorColor; } /** * Set the fill color of the cursor indicating the playhead * position. * * @param {string} color A CSS color string. * @example wavesurfer.setCursorColor('#222'); */ setCursorColor(color) { this.params.cursorColor = color; this.drawer.updateCursor(); } /** * Get the height of the waveform. * * @return {number} Height measured in pixels. */ getHeight() { return this.params.height; } /** * Set the height of the waveform. * * @param {number} height Height measured in pixels. * @example wavesurfer.setHeight(200); */ setHeight(height) { this.params.height = height; this.drawer.setHeight(height * this.params.pixelRatio); this.drawBuffer(); } /** * Get the correct peaks for current wave view-port and render wave * * @private * @emits WaveSurfer#redraw */ drawBuffer() { const nominalWidth = Math.round( this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio ); const parentWidth = this.drawer.getWidth(); let width = nominalWidth; let start = this.drawer.getScrollX(); let end = Math.max(start + parentWidth, width); // Fill container if ( this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth) ) { width = parentWidth; start = 0; end = width; } let peaks; if (this.params.partialRender) { const newRanges = this.peakCache.addRangeToPeakCache( width, start, end ); let i; for (i = 0; i < newRanges.length; i++) { peaks = this.backend.getPeaks( width, newRanges[i][0], newRanges[i][1] ); this.drawer.drawPeaks( peaks, width, newRanges[i][0], newRanges[i][1] ); } } else { peaks = this.backend.getPeaks(width, start, end); this.drawer.drawPeaks(peaks, width, start, end); } this.fireEvent('redraw', peaks, width); } /** * Horizontally zooms the waveform in and out. It also changes the parameter * `minPxPerSec` and enables the `scrollParent` option. Calling the function * with a falsey parameter will reset the zoom state. * * @param {?number} pxPerSec Number of horizontal pixels per second of * audio, if none is set the waveform returns to unzoomed state * @emits WaveSurfer#zoom * @example wavesurfer.zoom(20); */ zoom(pxPerSec) { if (!pxPerSec) { this.params.minPxPerSec = this.defaultParams.minPxPerSec; this.params.scrollParent = false; } else { this.params.minPxPerSec = pxPerSec; this.params.scrollParent = true; } this.drawBuffer(); this.drawer.progress(this.backend.getPlayedPercents()); this.drawer.recenter(this.getCurrentTime() / this.getDuration()); this.fireEvent('zoom', pxPerSec); } /** * Decode buffer and load * * @private * @param {ArrayBuffer} arraybuffer */ loadArrayBuffer(arraybuffer) { this.decodeArrayBuffer(arraybuffer, data => { if (!this.isDestroyed) { this.loadDecodedBuffer(data); } }); } /** * Directly load an externally decoded AudioBuffer * * @private * @param {AudioBuffer} buffer * @emits WaveSurfer#ready */ loadDecodedBuffer(buffer) { this.backend.load(buffer); this.drawBuffer(); this.fireEvent('ready'); this.isReady = true; } /** * Loads audio data from a Blob or File object * * @param {Blob|File} blob Audio data * @example */ loadBlob(blob) { // Create file reader const reader = new FileReader(); reader.addEventListener('progress', e => this.onProgress(e)); reader.addEventListener('load', e => this.loadArrayBuffer(e.target.result) ); reader.addEventListener('error', () => this.fireEvent('error', 'Error reading file') ); reader.readAsArrayBuffer(blob); this.empty(); } /** * Loads audio and re-renders the waveform. * * @param {string|HTMLMediaElement} url The url of the audio file or the * audio element with the audio * @param {?number[]|number[][]} peaks Wavesurfer does not have to decode * the audio to render the waveform if this is specified * @param {?string} preload (Use with backend `MediaElement`) * `'none'|'metadata'|'auto'` Preload attribute for the media element * @param {?number} duration The duration of the audio. This is used to * render the peaks data in the correct size for the audio duration (as * befits the current minPxPerSec and zoom value) without having to decode * the audio. * @example * // using ajax or media element to load (depending on backend) * wavesurfer.load('http://example.com/demo.wav'); * * // setting preload attribute with media element backend and supplying * peaks wavesurfer.load( * 'http://example.com/demo.wav', * [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888], * true, * ); */ load(url, peaks, preload, duration) { this.empty(); if (preload) { // check whether the preload attribute will be usable and if not log // a warning listing the reasons why not and nullify the variable const preloadIgnoreReasons = { "Preload is not 'auto', 'none' or 'metadata'": ['auto', 'metadata', 'none'].indexOf(preload) === -1, 'Peaks are not provided': !peaks, 'Backend is not of type MediaElement': this.params.backend !== 'MediaElement', 'Url is not of type string': typeof url !== 'string' }; const activeReasons = Object.keys(preloadIgnoreReasons).filter( reason => preloadIgnoreReasons[reason] ); if (activeReasons.length) { console.warn( 'Preload parameter of wavesurfer.load will be ignored because:\n\t- ' + activeReasons.join('\n\t- ') ); // stop invalid values from being used preload = null; } } switch (this.params.backend) { case 'WebAudio': return this.loadBuffer(url, peaks, duration); case 'MediaElement': return this.loadMediaElement(url, peaks, preload, duration); } } /** * Loads audio using Web Audio buffer backend. * * @private * @param {string} url * @param {?number[]|number[][]} peaks * @param {?number} duration */ loadBuffer(url, peaks, duration) { const load = action => { if (action) { this.tmpEvents.push(this.once('ready', action)); } return this.getArrayBuffer(url, data => this.loadArrayBuffer(data)); }; if (peaks) { this.backend.setPeaks(peaks, duration); this.drawBuffer(); this.tmpEvents.push(this.once('interaction', load)); } else { return load(); } } /** * Either create a media element, or load an existing media element. * * @private * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an * existing HTML5 Audio/Video Element * @param {number[]|number[][]} peaks Array of peaks. Required to bypass web audio * dependency * @param {?boolean} preload Set to true if the preload attribute of the * audio element should be enabled * @param {?number} duration */ loadMediaElement(urlOrElt, peaks, preload, duration) { let url = urlOrElt; if (typeof urlOrElt === 'string') { this.backend.load(url, this.mediaContainer, peaks, preload); } else { const elt = urlOrElt; this.backend.loadElt(elt, peaks); // If peaks are not provided, // url = element.src so we can get peaks with web audio url = elt.src; } this.tmpEvents.push( this.backend.once('canplay', () => { this.drawBuffer(); this.fireEvent('ready'); this.isReady = true; }), this.backend.once('error', err => this.fireEvent('error', err)) ); // If no pre-decoded peaks provided or pre-decoded peaks are // provided with forceDecode flag, attempt to download the // audio file and decode it with Web Audio. if (peaks) { this.backend.setPeaks(peaks, duration); } if ( (!peaks || this.params.forceDecode) && this.backend.supportsWebAudio() ) { this.getArrayBuffer(url, arraybuffer => { this.decodeArrayBuffer(arraybuffer, buffer => { this.backend.buffer = buffer; this.backend.setPeaks(null); this.drawBuffer(); this.fireEvent('waveform-ready'); }); }); } } /** * Decode an array buffer and pass data to a callback * * @private * @param {Object} arraybuffer * @param {function} callback */ decodeArrayBuffer(arraybuffer, callback) { this.arraybuffer = arraybuffer; this.backend.decodeArrayBuffer( arraybuffer, data => { // Only use the decoded data if we haven't been destroyed or // another decode started in the meantime if (!this.isDestroyed && this.arraybuffer == arraybuffer) { callback(data); this.arraybuffer = null; } }, () => this.fireEvent('error', 'Error decoding audiobuffer') ); } /** * Load an array buffer by ajax and pass to a callback * * @param {string} url * @param {function} callback * @private */ getArrayBuffer(url, callback) { const ajax = util.ajax({ url: url, responseType: 'arraybuffer', xhr: this.params.xhr }); this.currentAjax = ajax; this.tmpEvents.push( ajax.on('progress', e => { this.onProgress(e); }), ajax.on('success', (data, e) => { callback(data); this.currentAjax = null; }), ajax.on('error', e => { this.fireEvent('error', 'XHR error: ' + e.target.statusText); this.currentAjax = null; }) ); return ajax; } /** * Called while the audio file is loading * * @private * @param {Event} e * @emits WaveSurfer#loading */ onProgress(e) { let percentComplete; if (e.lengthComputable) { percentComplete = e.loaded / e.total; } else { // Approximate progress with an asymptotic // function, and assume downloads in the 1-3 MB range. percentComplete = e.loaded / (e.loaded + 1000000); } this.fireEvent('loading', Math.round(percentComplete * 100), e.target); } /** * Exports PCM data into a JSON array and opens in a new window. * * @param {number} length=1024 The scale in which to export the peaks. (Integer) * @param {number} accuracy=10000 (Integer) * @param {?boolean} noWindow Set to true to disable opening a new * window with the JSON * @param {number} start * @todo Update exportPCM to work with new getPeaks signature * @return {string} JSON of peaks */ exportPCM(length, accuracy, noWindow, start) { length = length || 1024; start = start || 0; accuracy = accuracy || 10000; noWindow = noWindow || false; const peaks = this.backend.getPeaks(length, start); const arr = [].map.call( peaks, val => Math.round(val * accuracy) / accuracy ); const json = JSON.stringify(arr); if (!noWindow) { window.open( 'data:application/json;charset=utf-8,' + encodeURIComponent(json) ); } return json; } /** * Save waveform image as data URI. * * The default format is `image/png`. Other supported types are * `image/jpeg` and `image/webp`. * * @param {string} format='image/png' * @param {number} quality=1 * @return {string} data URI of image */ exportImage(format, quality) { if (!format) { format = 'image/png'; } if (!quality) { quality = 1; } return this.drawer.getImage(format, quality); } /** * Cancel any ajax request currently in progress */ cancelAjax() { if (this.currentAjax) { this.currentAjax.xhr.abort(); this.currentAjax = null; } } /** * @private */ clearTmpEvents() { this.tmpEvents.forEach(e => e.un()); } /** * Display empty waveform. */ empty() { if (!this.backend.isPaused()) { this.stop(); this.backend.disconnectSource(); } this.isReady = false; this.cancelAjax(); this.clearTmpEvents(); this.drawer.progress(0); this.drawer.setWidth(0); this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0); } /** * Remove events, elements and disconnect WebAudio nodes. * * @emits WaveSurfer#destroy */ destroy() { this.destroyAllPlugins(); this.fireEvent('destroy'); this.cancelAjax(); this.clearTmpEvents(); this.unAll(); if (this.params.responsive !== false) { window.removeEventListener('resize', this._onResize, true); window.removeEventListener( 'orientationchange', this._onResize, true ); } this.backend.destroy(); this.drawer.destroy(); this.isDestroyed = true; this.isReady = false; this.arraybuffer = null; } } ",
"import Observer from './observer'; /** * Perform an ajax request * * @param {Options} options Description * * @returns {Object} Observer instance */ export default function ajax(options) { const instance = new Observer(); const xhr = new XMLHttpRequest(); let fired100 = false; xhr.open(options.method || 'GET', options.url, true); xhr.responseType = options.responseType || 'json'; if (options.xhr) { if (options.xhr.requestHeaders) { // add custom request headers options.xhr.requestHeaders.forEach(header => { xhr.setRequestHeader(header.key, header.value); }); } if (options.xhr.withCredentials) { // use credentials xhr.withCredentials = true; } } xhr.addEventListener('progress', e => { instance.fireEvent('progress', e); if (e.lengthComputable && e.loaded == e.total) { fired100 = true; } }); xhr.addEventListener('load', e => { if (!fired100) { instance.fireEvent('progress', e); } instance.fireEvent('load', e); if (200 == xhr.status || 206 == xhr.status) { instance.fireEvent('success', xhr.response, e); } else { instance.fireEvent('error', e); } }); xhr.addEventListener('error', e => instance.fireEvent('error', e)); xhr.send(); instance.xhr = xhr; return instance; } ",
"/** * Get a random prefixed ID * * @returns {String} Random ID */ export default function getId() { return ( 'wavesurfer_' + Math.random() .toString(32) .substring(2) ); } ",
"/** * Get the largest value * * @param {Array} values Array of numbers * @returns {Number} Largest number found */ export default function max(values) { let largest = -Infinity; Object.keys(values).forEach(i => { if (values[i] > largest) { largest = values[i]; } }); return largest; } ",
"/** * Get the smallest value * * @param {Array} values Array of numbers * @returns {Number} Smallest number found */ export default function min(values) { let smallest = Number(Infinity); Object.keys(values).forEach(i => { if (values[i] < smallest) { smallest = values[i]; } }); return smallest; } ",
"/** * Extend an object shallowly with others * * @param {Object} dest The target object * @param {Object[]} sources The objects to use for extending * * @return {Object} Merged object */ export default function extend(dest, ...sources) { sources.forEach(source => { Object.keys(source).forEach(key => { dest[key] = source[key]; }); }); return dest; } ",
"/** * Apply a map of styles to an element * * @param {HTMLElement} el The element that the styles will be applied to * @param {Object} styles The map of propName: attribute, both are used as-is * * @return {HTMLElement} el */ export default function style(el, styles) { Object.keys(styles).forEach(prop => { if (el.style[prop] !== styles[prop]) { el.style[prop] = styles[prop]; } }); return el; } ",
"import reqAnimationFrame from './request-animation-frame'; /** * Create a function which will be called at the next requestAnimationFrame * cycle * * @param {function} func The function to call * * @return {func} The function wrapped within a requestAnimationFrame */ export default function frame(func) { return (...args) => reqAnimationFrame(() => func(...args)); } ",
"/** * Returns a function, that, as long as it continues to be invoked, will not * be triggered. The function will be called after it stops being called for * N milliseconds. If `immediate` is passed, trigger the function on the * leading edge, instead of the trailing. The function also has a property 'clear' * that is a function which will clear the timer to prevent previously scheduled executions. * * @source underscore.js * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/ * @param {Function} function to wrap * @param {Number} timeout in ms (`100`) * @param {Boolean} whether to execute at the beginning (`false`) * @api public */ function debounce(func, wait, immediate){ var timeout, args, context, timestamp, result; if (null == wait) wait = 100; function later() { var last = Date.now() - timestamp; if (last < wait && last >= 0) { timeout = setTimeout(later, wait - last); } else { timeout = null; if (!immediate) { result = func.apply(context, args); context = args = null; } } }; var debounced = function(){ context = this; args = arguments; timestamp = Date.now(); var callNow = immediate && !timeout; if (!timeout) timeout = setTimeout(later, wait); if (callNow) { result = func.apply(context, args); context = args = null; } return result; }; debounced.clear = function() { if (timeout) { clearTimeout(timeout); timeout = null; } }; debounced.flush = function() { if (timeout) { result = func.apply(context, args); context = args = null; clearTimeout(timeout); timeout = null; } }; return debounced; }; // Adds compatibility for ES modules debounce.debounce = debounce; module.exports = debounce; ",
"function preventClickHandler(e) { e.stopPropagation(); document.body.removeEventListener('click', preventClickHandler, true); } export default function preventClick(values) { document.body.addEventListener('click', preventClickHandler, true); } ",
"import Drawer from './drawer'; import * as util from './util'; /** * @typedef {Object} CanvasEntry * @private * @property {HTMLElement} wave The wave node * @property {CanvasRenderingContext2D} waveCtx The canvas rendering context * @property {?HTMLElement} progress The progress wave node * @property {?CanvasRenderingContext2D} progressCtx The progress wave canvas * rendering context * @property {?number} start Start of the area the canvas should render, between 0 and 1 * @property {?number} end End of the area the canvas should render, between 0 and 1 */ /** * MultiCanvas renderer for wavesurfer. Is currently the default and sole built * in renderer. */ export default class MultiCanvas extends Drawer { /** * @param {HTMLElement} container The container node of the wavesurfer instance * @param {WavesurferParams} params The wavesurfer initialisation options */ constructor(container, params) { super(container, params); /** * @type {number} * @private */ this.maxCanvasWidth = params.maxCanvasWidth; /** * @private * @type {number} */ this.maxCanvasElementWidth = Math.round( params.maxCanvasWidth / params.pixelRatio ); /** * Whether or not the progress wave is rendered. If the `waveColor` * and `progressColor` are the same color it is not. * @type {boolean} */ this.hasProgressCanvas = params.waveColor != params.progressColor; /** * @private * @type {number} */ this.halfPixel = 0.5 / params.pixelRatio; /** * @private * @type {Array} */ this.canvases = []; /** @private */ this.progressWave = null; } /** * Initialize the drawer */ init() { this.createWrapper(); this.createElements(); } /** * Create the canvas elements and style them * * @private */ createElements() { this.progressWave = this.wrapper.appendChild( this.style(document.createElement('wave'), { position: 'absolute', zIndex: 3, left: 0, top: 0, bottom: 0, overflow: 'hidden', width: '0', display: 'none', boxSizing: 'border-box', borderRightStyle: 'solid', pointerEvents: 'none' }) ); this.addCanvas(); this.updateCursor(); } /** * Update cursor style from params. */ updateCursor() { this.style(this.progressWave, { borderRightWidth: this.params.cursorWidth + 'px', borderRightColor: this.params.cursorColor }); } /** * Adjust to the updated size by adding or removing canvases */ updateSize() { const totalWidth = Math.round(this.width / this.params.pixelRatio); const requiredCanvases = Math.ceil( totalWidth / this.maxCanvasElementWidth ); while (this.canvases.length < requiredCanvases) { this.addCanvas(); } while (this.canvases.length > requiredCanvases) { this.removeCanvas(); } this.canvases.forEach((entry, i) => { // Add some overlap to prevent vertical white stripes, keep the // width even for simplicity let canvasWidth = this.maxCanvasWidth + 2 * Math.ceil(this.params.pixelRatio / 2); if (i == this.canvases.length - 1) { canvasWidth = this.width - this.maxCanvasWidth * (this.canvases.length - 1); } this.updateDimensions(entry, canvasWidth, this.height); this.clearWaveForEntry(entry); }); } /** * Add a canvas to the canvas list * * @private */ addCanvas() { const entry = {}; const leftOffset = this.maxCanvasElementWidth * this.canvases.length; entry.wave = this.wrapper.appendChild( this.style(document.createElement('canvas'), { position: 'absolute', zIndex: 2, left: leftOffset + 'px', top: 0, bottom: 0, height: '100%', pointerEvents: 'none' }) ); entry.waveCtx = entry.wave.getContext('2d'); if (this.hasProgressCanvas) { entry.progress = this.progressWave.appendChild( this.style(document.createElement('canvas'), { position: 'absolute', left: leftOffset + 'px', top: 0, bottom: 0, height: '100%' }) ); entry.progressCtx = entry.progress.getContext('2d'); } this.canvases.push(entry); } /** * Pop one canvas from the list * * @private */ removeCanvas() { const lastEntry = this.canvases.pop(); lastEntry.wave.parentElement.removeChild(lastEntry.wave); if (this.hasProgressCanvas) { lastEntry.progress.parentElement.removeChild(lastEntry.progress); } } /** * Update the dimensions of a canvas element * * @private * @param {CanvasEntry} entry * @param {number} width The new width of the element * @param {number} height The new height of the element */ updateDimensions(entry, width, height) { const elementWidth = Math.round(width / this.params.pixelRatio); const totalWidth = Math.round(this.width / this.params.pixelRatio); // Where the canvas starts and ends in the waveform, represented as a // decimal between 0 and 1. entry.start = entry.waveCtx.canvas.offsetLeft / totalWidth || 0; entry.end = entry.start + elementWidth / totalWidth; entry.waveCtx.canvas.width = width; entry.waveCtx.canvas.height = height; this.style(entry.waveCtx.canvas, { width: elementWidth + 'px' }); this.style(this.progressWave, { display: 'block' }); if (this.hasProgressCanvas) { entry.progressCtx.canvas.width = width; entry.progressCtx.canvas.height = height; this.style(entry.progressCtx.canvas, { width: elementWidth + 'px' }); } } /** * Clear the whole waveform */ clearWave() { this.canvases.forEach(entry => this.clearWaveForEntry(entry)); } /** * Clear one canvas * * @private * @param {CanvasEntry} entry */ clearWaveForEntry(entry) { entry.waveCtx.clearRect( 0, 0, entry.waveCtx.canvas.width, entry.waveCtx.canvas.height ); if (this.hasProgressCanvas) { entry.progressCtx.clearRect( 0, 0, entry.progressCtx.canvas.width, entry.progressCtx.canvas.height ); } } /** * Draw a waveform with bars * * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} channelIndex The index of the current channel. Normally * should be 0. Must be an integer. * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that should be * rendered */ drawBars(peaks, channelIndex, start, end) { return this.prepareDraw( peaks, channelIndex, start, end, ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => { // if drawBars was called within ws.empty we don't pass a start and // don't want anything to happen if (start === undefined) { return; } // Skip every other value if there are negatives. const peakIndexScale = hasMinVals ? 2 : 1; const length = peaks.length / peakIndexScale; const bar = this.params.barWidth * this.params.pixelRatio; const gap = this.params.barGap === null ? Math.max(this.params.pixelRatio, ~~(bar / 2)) : Math.max( this.params.pixelRatio, this.params.barGap * this.params.pixelRatio ); const step = bar + gap; const scale = length / this.width; const first = start; const last = end; let i; for (i = first; i < last; i += step) { const peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0; const h = Math.round((peak / absmax) * halfH); this.fillRect( i + this.halfPixel, halfH - h + offsetY, bar + this.halfPixel, h * 2 ); } } ); } /** * Draw a waveform * * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} channelIndex The index of the current channel. Normally * should be 0 * @param {number?} start The x-offset of the beginning of the area that * should be rendered (If this isn't set only a flat line is rendered) * @param {number?} end The x-offset of the end of the area that should be * rendered */ drawWave(peaks, channelIndex, start, end) { return this.prepareDraw( peaks, channelIndex, start, end, ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => { if (!hasMinVals) { const reflectedPeaks = []; const len = peaks.length; let i; for (i = 0; i < len; i++) { reflectedPeaks[2 * i] = peaks[i]; reflectedPeaks[2 * i + 1] = -peaks[i]; } peaks = reflectedPeaks; } // if drawWave was called within ws.empty we don't pass a start and // end and simply want a flat line if (start !== undefined) { this.drawLine(peaks, absmax, halfH, offsetY, start, end); } // Always draw a median line this.fillRect( 0, halfH + offsetY - this.halfPixel, this.width, this.halfPixel ); } ); } /** * Tell the canvas entries to render their portion of the waveform * * @private * @param {number[]} peaks Peak data * @param {number} absmax Maximum peak value (absolute) * @param {number} halfH Half the height of the waveform * @param {number} offsetY Offset to the top * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that * should be rendered */ drawLine(peaks, absmax, halfH, offsetY, start, end) { this.canvases.forEach(entry => { this.setFillStyles(entry); this.drawLineToContext( entry, entry.waveCtx, peaks, absmax, halfH, offsetY, start, end ); this.drawLineToContext( entry, entry.progressCtx, peaks, absmax, halfH, offsetY, start, end ); }); } /** * Render the actual waveform line on a canvas * * @private * @param {CanvasEntry} entry * @param {Canvas2DContextAttributes} ctx Essentially `entry.[wave|progress]Ctx` * @param {number[]} peaks * @param {number} absmax Maximum peak value (absolute) * @param {number} halfH Half the height of the waveform * @param {number} offsetY Offset to the top * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that * should be rendered */ drawLineToContext(entry, ctx, peaks, absmax, halfH, offsetY, start, end) { if (!ctx) { return; } const length = peaks.length / 2; const scale = this.params.fillParent && this.width != length ? this.width / length : 1; const first = Math.round(length * entry.start); // Use one more peak value to make sure we join peaks at ends -- unless, // of course, this is the last canvas. const last = Math.round(length * entry.end) + 1; if (first > end || last < start) { return; } const canvasStart = Math.min(first, start); const canvasEnd = Math.max(last, end); let i; let j; ctx.beginPath(); ctx.moveTo( (canvasStart - first) * scale + this.halfPixel, halfH + offsetY ); for (i = canvasStart; i < canvasEnd; i++) { const peak = peaks[2 * i] || 0; const h = Math.round((peak / absmax) * halfH); ctx.lineTo( (i - first) * scale + this.halfPixel, halfH - h + offsetY ); } // Draw the bottom edge going backwards, to make a single // closed hull to fill. for (j = canvasEnd - 1; j >= canvasStart; j--) { const peak = peaks[2 * j + 1] || 0; const h = Math.round((peak / absmax) * halfH); ctx.lineTo( (j - first) * scale + this.halfPixel, halfH - h + offsetY ); } ctx.closePath(); ctx.fill(); } /** * Draw a rectangle on the waveform * * @param {number} x * @param {number} y * @param {number} width * @param {number} height */ fillRect(x, y, width, height) { const startCanvas = Math.floor(x / this.maxCanvasWidth); const endCanvas = Math.min( Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length ); let i; for (i = startCanvas; i < endCanvas; i++) { const entry = this.canvases[i]; const leftOffset = i * this.maxCanvasWidth; const intersection = { x1: Math.max(x, i * this.maxCanvasWidth), y1: y, x2: Math.min( x + width, i * this.maxCanvasWidth + entry.waveCtx.canvas.width ), y2: y + height }; if (intersection.x1 < intersection.x2) { this.setFillStyles(entry); this.fillRectToContext( entry.waveCtx, intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1 ); this.fillRectToContext( entry.progressCtx, intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1 ); } } } /** * Performs preparation tasks and calculations which are shared by drawBars and drawWave * * @private * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} channelIndex The index of the current channel. Normally * should be 0 * @param {number?} start The x-offset of the beginning of the area that * should be rendered (If this isn't set only a flat line is rendered) * @param {number?} end The x-offset of the end of the area that should be * rendered * @param {function} fn The render function to call */ prepareDraw(peaks, channelIndex, start, end, fn) { return util.frame(() => { // Split channels and call this function with the channelIndex set if (peaks[0] instanceof Array) { const channels = peaks; if (this.params.splitChannels) { this.setHeight( channels.length * this.params.height * this.params.pixelRatio ); return channels.forEach((channelPeaks, i) => this.prepareDraw(channelPeaks, i, start, end, fn) ); } peaks = channels[0]; } // calculate maximum modulation value, either from the barHeight // parameter or if normalize=true from the largest value in the peak // set let absmax = 1 / this.params.barHeight; if (this.params.normalize) { const max = util.max(peaks); const min = util.min(peaks); absmax = -min > max ? -min : max; } // Bar wave draws the bottom only as a reflection of the top, // so we don't need negative values const hasMinVals = [].some.call(peaks, val => val < 0); const height = this.params.height * this.params.pixelRatio; const offsetY = height * channelIndex || 0; const halfH = height / 2; return fn({ absmax: absmax, hasMinVals: hasMinVals, height: height, offsetY: offsetY, halfH: halfH, peaks: peaks }); })(); } /** * Draw the actual rectangle on a canvas * * @private * @param {Canvas2DContextAttributes} ctx * @param {number} x * @param {number} y * @param {number} width * @param {number} height */ fillRectToContext(ctx, x, y, width, height) { if (!ctx) { return; } ctx.fillRect(x, y, width, height); } /** * Set the fill styles for a certain entry (wave and progress) * * @private * @param {CanvasEntry} entry */ setFillStyles(entry) { entry.waveCtx.fillStyle = this.params.waveColor; if (this.hasProgressCanvas) { entry.progressCtx.fillStyle = this.params.progressColor; } } /** * Return image data of the waveform * * @param {string} type='image/png' An optional value of a format type. * @param {number} quality=0.92 An optional value between 0 and 1. * @return {string|string[]} images A data URL or an array of data URLs */ getImage(type, quality) { const images = this.canvases.map(entry => entry.wave.toDataURL(type, quality) ); return images.length > 1 ? images : images[0]; } /** * Render the new progress * * @param {number} position X-Offset of progress position in pixels */ updateProgress(position) { this.style(this.progressWave, { width: position + 'px' }); } } ",
"import * as util from './util'; /** * Parent class for renderers * * @extends {Observer} */ export default class Drawer extends util.Observer { /** * @param {HTMLElement} container The container node of the wavesurfer instance * @param {WavesurferParams} params The wavesurfer initialisation options */ constructor(container, params) { super(); /** @private */ this.container = container; /** * @type {WavesurferParams} * @private */ this.params = params; /** * The width of the renderer * @type {number} */ this.width = 0; /** * The height of the renderer * @type {number} */ this.height = params.height * this.params.pixelRatio; /** @private */ this.lastPos = 0; /** * The `<wave>` element which is added to the container * @type {HTMLElement} */ this.wrapper = null; } /** * Alias of `util.style` * * @param {HTMLElement} el The element that the styles will be applied to * @param {Object} styles The map of propName: attribute, both are used as-is * @return {HTMLElement} el */ style(el, styles) { return util.style(el, styles); } /** * Create the wrapper `<wave>` element, style it and set up the events for * interaction */ createWrapper() { this.wrapper = this.container.appendChild( document.createElement('wave') ); this.style(this.wrapper, { display: 'block', position: 'relative', userSelect: 'none', webkitUserSelect: 'none', height: this.params.height + 'px' }); if (this.params.fillParent || this.params.scrollParent) { this.style(this.wrapper, { width: '100%', overflowX: this.params.hideScrollbar ? 'hidden' : 'auto', overflowY: 'hidden' }); } this.setupWrapperEvents(); } /** * Handle click event * * @param {Event} e Click event * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()` * @return {number} Playback position from 0 to 1 */ handleEvent(e, noPrevent) { !noPrevent && e.preventDefault(); const clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX; const bbox = this.wrapper.getBoundingClientRect(); const nominalWidth = this.width; const parentWidth = this.getWidth(); let progress; if (!this.params.fillParent && nominalWidth < parentWidth) { progress = (clientX - bbox.left) * (this.params.pixelRatio / nominalWidth) || 0; if (progress > 1) { progress = 1; } } else { progress = (clientX - bbox.left + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0; } return progress; } /** * @private */ setupWrapperEvents() { this.wrapper.addEventListener('click', e => { const scrollbarHeight = this.wrapper.offsetHeight - this.wrapper.clientHeight; if (scrollbarHeight != 0) { // scrollbar is visible. Check if click was on it const bbox = this.wrapper.getBoundingClientRect(); if (e.clientY >= bbox.bottom - scrollbarHeight) { // ignore mousedown as it was on the scrollbar return; } } if (this.params.interact) { this.fireEvent('click', e, this.handleEvent(e)); } }); this.wrapper.addEventListener('scroll', e => this.fireEvent('scroll', e) ); } /** * Draw peaks on the canvas * * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} length The width of the area that should be drawn * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that should be * rendered */ drawPeaks(peaks, length, start, end) { if (!this.setWidth(length)) { this.clearWave(); } this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end); } /** * Scroll to the beginning */ resetScroll() { if (this.wrapper !== null) { this.wrapper.scrollLeft = 0; } } /** * Recenter the view-port at a certain percent of the waveform * * @param {number} percent Value from 0 to 1 on the waveform */ recenter(percent) { const position = this.wrapper.scrollWidth * percent; this.recenterOnPosition(position, true); } /** * Recenter the view-port on a position, either scroll there immediately or * in steps of 5 pixels * * @param {number} position X-offset in pixels * @param {boolean} immediate Set to true to immediately scroll somewhere */ recenterOnPosition(position, immediate) { const scrollLeft = this.wrapper.scrollLeft; const half = ~~(this.wrapper.clientWidth / 2); const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth; let target = position - half; let offset = target - scrollLeft; if (maxScroll == 0) { // no need to continue if scrollbar is not there return; } // if the cursor is currently visible... if (!immediate && -half <= offset && offset < half) { // we'll limit the "re-center" rate. const rate = 5; offset = Math.max(-rate, Math.min(rate, offset)); target = scrollLeft + offset; } // limit target to valid range (0 to maxScroll) target = Math.max(0, Math.min(maxScroll, target)); // no use attempting to scroll if we're not moving if (target != scrollLeft) { this.wrapper.scrollLeft = target; } } /** * Get the current scroll position in pixels * * @return {number} */ getScrollX() { const pixelRatio = this.params.pixelRatio; let x = Math.round(this.wrapper.scrollLeft * pixelRatio); // In cases of elastic scroll (safari with mouse wheel) you can // scroll beyond the limits of the container // Calculate and floor the scrollable extent to make sure an out // of bounds value is not returned // Ticket #1312 if (this.params.scrollParent) { const maxScroll = ~~( this.wrapper.scrollWidth * pixelRatio - this.getWidth() ); x = Math.min(maxScroll, Math.max(0, x)); } return x; } /** * Get the width of the container * * @return {number} */ getWidth() { return Math.round(this.container.clientWidth * this.params.pixelRatio); } /** * Set the width of the container * * @param {number} width */ setWidth(width) { if (this.width == width) { return false; } this.width = width; if (this.params.fillParent || this.params.scrollParent) { this.style(this.wrapper, { width: '' }); } else { this.style(this.wrapper, { width: ~~(this.width / this.params.pixelRatio) + 'px' }); } this.updateSize(); return true; } /** * Set the height of the container * * @param {number} height */ setHeight(height) { if (height == this.height) { return false; } this.height = height; this.style(this.wrapper, { height: ~~(this.height / this.params.pixelRatio) + 'px' }); this.updateSize(); return true; } /** * Called by wavesurfer when progress should be rendered * * @param {number} progress From 0 to 1 */ progress(progress) { const minPxDelta = 1 / this.params.pixelRatio; const pos = Math.round(progress * this.width) * minPxDelta; if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) { this.lastPos = pos; if (this.params.scrollParent && this.params.autoCenter) { const newPos = ~~(this.wrapper.scrollWidth * progress); this.recenterOnPosition(newPos); } this.updateProgress(pos); } } /** * This is called when wavesurfer is destroyed */ destroy() { this.unAll(); if (this.wrapper) { if (this.wrapper.parentNode == this.container) { this.container.removeChild(this.wrapper); } this.wrapper = null; } } /* Renderer-specific methods */ /** * Called after cursor related params have changed. * * @abstract */ updateCursor() {} /** * Called when the size of the container changes so the renderer can adjust * * @abstract */ updateSize() {} /** * Draw a waveform with bars * * @abstract * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} channelIndex The index of the current channel. Normally * should be 0 * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that should be * rendered */ drawBars(peaks, channelIndex, start, end) {} /** * Draw a waveform * * @abstract * @param {number[]|number[][]} peaks Can also be an array of arrays for split channel * rendering * @param {number} channelIndex The index of the current channel. Normally * should be 0 * @param {number} start The x-offset of the beginning of the area that * should be rendered * @param {number} end The x-offset of the end of the area that should be * rendered */ drawWave(peaks, channelIndex, start, end) {} /** * Clear the waveform * * @abstract */ clearWave() {} /** * Render the new progress * * @abstract * @param {number} position X-Offset of progress position in pixels */ updateProgress(position) {} } ",
"import WebAudio from './webaudio'; import * as util from './util'; /** * MediaElement backend */ export default class MediaElement extends WebAudio { /** * Construct the backend * * @param {WavesurferParams} params */ constructor(params) { super(params); /** @private */ this.params = params; // Dummy media to catch errors /** @private */ this.media = { currentTime: 0, duration: 0, paused: true, playbackRate: 1, play() {}, pause() {}, volume: 0 }; /** @private */ this.mediaType = params.mediaType.toLowerCase(); /** @private */ this.elementPosition = params.elementPosition; /** @private */ this.peaks = null; /** @private */ this.playbackRate = 1; /** @private */ this.volume = 1; /** @private */ this.buffer = null; /** @private */ this.onPlayEnd = null; } /** * Initialise the backend, called in `wavesurfer.createBackend()` */ init() { this.setPlaybackRate(this.params.audioRate); this.createTimer(); } /** * Create a timer to provide a more precise `audioprocess` event. * * @private */ createTimer() { const onAudioProcess = () => { if (this.isPaused()) { return; } this.fireEvent('audioprocess', this.getCurrentTime()); // Call again in the next frame const requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame; requestAnimationFrame(onAudioProcess); }; this.on('play', onAudioProcess); // Update the progress one more time to prevent it from being stuck in // case of lower framerates this.on('pause', () => { this.fireEvent('audioprocess', this.getCurrentTime()); }); } /** * Create media element with url as its source, * and append to container element. * * @param {string} url Path to media file * @param {HTMLElement} container HTML element * @param {number[]|number[][]} peaks Array of peak data * @param {string} preload HTML 5 preload attribute value */ load(url, container, peaks, preload) { const media = document.createElement(this.mediaType); media.controls = this.params.mediaControls; media.autoplay = this.params.autoplay || false; media.preload = preload == null ? 'auto' : preload; media.src = url; media.style.width = '100%'; const prevMedia = container.querySelector(this.mediaType); if (prevMedia) { container.removeChild(prevMedia); } container.appendChild(media); this._load(media, peaks); } /** * Load existing media element. * * @param {HTMLMediaElement} elt HTML5 Audio or Video element * @param {number[]|number[][]} peaks Array of peak data */ loadElt(elt, peaks) { elt.controls = this.params.mediaControls; elt.autoplay = this.params.autoplay || false; this._load(elt, peaks); } /** * Private method called by both load (from url) * and loadElt (existing media element). * * @param {HTMLMediaElement} media HTML5 Audio or Video element * @param {number[]|number[][]} peaks Array of peak data * @private */ _load(media, peaks) { // load must be called manually on iOS, otherwise peaks won't draw // until a user interaction triggers load --> 'ready' event if (typeof media.load == 'function') { // Resets the media element and restarts the media resource. Any // pending events are discarded. How much media data is fetched is // still affected by the preload attribute. media.load(); } media.addEventListener('error', () => { this.fireEvent('error', 'Error loading media element'); }); media.addEventListener('canplay', () => { this.fireEvent('canplay'); }); media.addEventListener('ended', () => { this.fireEvent('finish'); }); // Listen to and relay play and pause events to enable // playback control from the external media element media.addEventListener('play', () => { this.fireEvent('play'); }); media.addEventListener('pause', () => { this.fireEvent('pause'); }); this.media = media; this.peaks = peaks; this.onPlayEnd = null; this.buffer = null; this.setPlaybackRate(this.playbackRate); this.setVolume(this.volume); } /** * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()` * * @return {boolean} */ isPaused() { return !this.media || this.media.paused; } /** * Used by `wavesurfer.getDuration()` * * @return {number} */ getDuration() { if (this.explicitDuration) { return this.explicitDuration; } let duration = (this.buffer || this.media).duration; if (duration >= Infinity) { // streaming audio duration = this.media.seekable.end(0); } return duration; } /** * Returns the current time in seconds relative to the audio-clip's * duration. * * @return {number} */ getCurrentTime() { return this.media && this.media.currentTime; } /** * Get the position from 0 to 1 * * @return {number} */ getPlayedPercents() { return this.getCurrentTime() / this.getDuration() || 0; } /** * Get the audio source playback rate. * * @return {number} */ getPlaybackRate() { return this.playbackRate || this.media.playbackRate; } /** * Set the audio source playback rate. * * @param {number} value */ setPlaybackRate(value) { this.playbackRate = value || 1; this.media.playbackRate = this.playbackRate; } /** * Used by `wavesurfer.seekTo()` * * @param {number} start Position to start at in seconds */ seekTo(start) { if (start != null) { this.media.currentTime = start; } this.clearPlayEnd(); } /** * Plays the loaded audio region. * * @param {number} start Start offset in seconds, relative to the beginning * of a clip. * @param {number} end When to stop, relative to the beginning of a clip. * @emits MediaElement#play * @return {Promise} */ play(start, end) { this.seekTo(start); const promise = this.media.play(); end && this.setPlayEnd(end); return promise; } /** * Pauses the loaded audio. * * @emits MediaElement#pause * @return {Promise} */ pause() { let promise; if (this.media) { promise = this.media.pause(); } this.clearPlayEnd(); return promise; } /** @private */ setPlayEnd(end) { this._onPlayEnd = time => { if (time >= end) { this.pause(); this.seekTo(end); } }; this.on('audioprocess', this._onPlayEnd); } /** @private */ clearPlayEnd() { if (this._onPlayEnd) { this.un('audioprocess', this._onPlayEnd); this._onPlayEnd = null; } } /** * Compute the max and min value of the waveform when broken into * <length> subranges. * * @param {number} length How many subranges to break the waveform into. * @param {number} first First sample in the required range. * @param {number} last Last sample in the required range. * @return {number[]|number[][]} Array of 2*<length> peaks or array of * arrays of peaks consisting of (max, min) values for each subrange. */ getPeaks(length, first, last) { if (this.buffer) { return super.getPeaks(length, first, last); } return this.peaks || []; } /** * Set the sink id for the media player * * @param {string} deviceId String value representing audio device id. */ setSinkId(deviceId) { if (deviceId) { if (!this.media.setSinkId) { return Promise.reject( new Error('setSinkId is not supported in your browser') ); } return this.media.setSinkId(deviceId); } return Promise.reject(new Error('Invalid deviceId: ' + deviceId)); } /** * Get the current volume * * @return {number} value A floating point value between 0 and 1. */ getVolume() { return this.volume || this.media.volume; } /** * Set the audio volume * * @param {number} value A floating point value between 0 and 1. */ setVolume(value) { this.volume = value; this.media.volume = this.volume; } /** * This is called when wavesurfer is destroyed * */ destroy() { this.pause(); this.unAll(); if ( this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode ) { this.media.parentNode.removeChild(this.media); } this.media = null; } } ",
"/** * Caches the decoded peaks data to improve rendering speed for large audio * * Is used if the option parameter `partialRender` is set to `true` */ export default class PeakCache { /** * Instantiate cache */ constructor() { this.clearPeakCache(); } /** * Empty the cache */ clearPeakCache() { /** * Flat array with entries that are always in pairs to mark the * beginning and end of each subrange. This is a convenience so we can * iterate over the pairs for easy set difference operations. * @private */ this.peakCacheRanges = []; /** * Length of the entire cachable region, used for resetting the cache * when this changes (zoom events, for instance). * @private */ this.peakCacheLength = -1; } /** * Add a range of peaks to the cache * * @param {number} length The length of the range * @param {number} start The x offset of the start of the range * @param {number} end The x offset of the end of the range * @return {number[][]} */ addRangeToPeakCache(length, start, end) { if (length != this.peakCacheLength) { this.clearPeakCache(); this.peakCacheLength = length; } // Return ranges that weren't in the cache before the call. let uncachedRanges = []; let i = 0; // Skip ranges before the current start. while ( i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start ) { i++; } // If |i| is even, |start| falls after an existing range. Otherwise, // |start| falls between an existing range, and the uncached region // starts when we encounter the next node in |peakCacheRanges| or // |end|, whichever comes first. if (i % 2 == 0) { uncachedRanges.push(start); } while ( i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end ) { uncachedRanges.push(this.peakCacheRanges[i]); i++; } // If |i| is even, |end| is after all existing ranges. if (i % 2 == 0) { uncachedRanges.push(end); } // Filter out the 0-length ranges. uncachedRanges = uncachedRanges.filter((item, pos, arr) => { if (pos == 0) { return item != arr[pos + 1]; } else if (pos == arr.length - 1) { return item != arr[pos - 1]; } return item != arr[pos - 1] && item != arr[pos + 1]; }); // Merge the two ranges together, uncachedRanges will either contain // wholly new points, or duplicates of points in peakCacheRanges. If // duplicates are detected, remove both and extend the range. this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges); this.peakCacheRanges = this.peakCacheRanges .sort((a, b) => a - b) .filter((item, pos, arr) => { if (pos == 0) { return item != arr[pos + 1]; } else if (pos == arr.length - 1) { return item != arr[pos - 1]; } return item != arr[pos - 1] && item != arr[pos + 1]; }); // Push the uncached ranges into an array of arrays for ease of // iteration in the functions that call this. const uncachedRangePairs = []; for (i = 0; i < uncachedRanges.length; i += 2) { uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]); } return uncachedRangePairs; } /** * For testing * * @return {number[][]} */ getCacheRanges() { const peakCacheRangePairs = []; let i; for (i = 0; i < this.peakCacheRanges.length; i += 2) { peakCacheRangePairs.push([ this.peakCacheRanges[i], this.peakCacheRanges[i + 1] ]); } return peakCacheRangePairs; } } "
],
sourceRoot: ""
}